import time
import random
from typing import Dict, Any, Optional, List
import logging

logger = logging.getLogger(__name__)

class AIService:
    def __init__(self, config):
        self.config = config
        self.providers = {
            'primary': self._setup_primary_provider(),
            'fallback': self._setup_fallback_provider()
        }
        self.max_retries = config.get('max_retries', 3)
        self.backoff_factor = config.get('backoff_factor', 1.5)
    
    def generate_manim_code(self, prompt: str, settings: Dict[str, Any]) -> Optional[str]:
        """Generate Manim code with retry logic and fallbacks"""
        providers = ['primary', 'fallback']
        
        for provider_name in providers:
            provider = self.providers[provider_name]
            retries = 0
            
            while retries <= self.max_retries:
                try:
                    logger.info(f"Attempting code generation with {provider_name}, attempt {retries+1}")
                    result = provider.generate(prompt, settings)
                    if self._validate_generated_code(result):
                        return result
                    else:
                        logger.warning(f"Invalid code generated by {provider_name}")
                except Exception as e:
                    logger.error(f"Error with {provider_name}: {str(e)}")
                
                # Exponential backoff with jitter
                wait_time = (self.backoff_factor ** retries) + (random.random() * 0.5)
                logger.info(f"Backing off for {wait_time:.2f} seconds")
                time.sleep(wait_time)
                retries += 1
        
        return None
    
    def _validate_generated_code(self, code: str) -> bool:
        """Validate the generated Manim code"""
        if not code:
            return False
            
        # Basic validation checks
        required_patterns = [
            "import manim", 
            "class", 
            "construct"
        ]
        
        return all(pattern in code for pattern in required_patterns)
    
    def _setup_primary_provider(self):
        # Placeholder for setting up the primary provider
        pass
        
    def _setup_fallback_provider(self):
        # Placeholder for setting up the fallback provider
        pass